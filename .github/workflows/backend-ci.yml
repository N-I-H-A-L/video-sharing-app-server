name: Backend Deploy

on:
  push:
    branches:
      - "**" # Trigger on all branches
  pull_request:
    branches:
      - "**" # Trigger on PRs to all branches

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.x"
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Build, tag, and push image to Amazon ECR
        run: |
          # Build and tag as latest
          docker build -t ${{ steps.login-ecr.outputs.registry }}/video-sharing-backend:latest .
          # Optionally tag with commit SHA for rollback
          docker tag ${{ steps.login-ecr.outputs.registry }}/video-sharing-backend:latest ${{ steps.login-ecr.outputs.registry }}/video-sharing-backend:${{ github.sha }}
          # Push both tags
          docker push ${{ steps.login-ecr.outputs.registry }}/video-sharing-backend:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/video-sharing-backend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          service: backend-deployment
          cluster: video-sharing-backend
          wait-for-service-stability: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
